input createMenubarInput {
  data: MenubarInput
}

type createMenubarPayload {
  menubar: Menubar
}

input createMenutabInput {
  data: MenutabInput
}

type createMenutabPayload {
  menutab: Menutab
}

input createNewInput {
  data: NewInput
}

type createNewPayload {
  new: New
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTestInput {
  data: TestInput
}

type createTestPayload {
  test: Test
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteMenubarInput {
  where: InputID
}

type deleteMenubarPayload {
  menubar: Menubar
}

input deleteMenutabInput {
  where: InputID
}

type deleteMenutabPayload {
  menutab: Menutab
}

input deleteNewInput {
  where: InputID
}

type deleteNewPayload {
  new: New
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTestInput {
  where: InputID
}

type deleteTestPayload {
  test: Test
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editMenubarInput {
  title: String
  order: Int
  place: ENUM_MENUBAR_PLACE
  href: String
  menutabs: [ID]
}

input editMenutabInput {
  title: String
  order: Int
  href: String
  menubar: ID
}

input editNewInput {
  name: String
  date_publish: DateTime
  content: String
  type: ENUM_NEW_TYPE
  description: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTestInput {
  img: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

enum ENUM_MENUBAR_PLACE {
  main
  side
}

enum ENUM_NEW_TYPE {
  slider
  primary
  secondary
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

type Menubar {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  order: Int
  place: ENUM_MENUBAR_PLACE
  href: String
  menutabs(sort: String, limit: Int, start: Int, where: JSON): [Menutab]
}

type MenubarAggregator {
  count: Int
  totalCount: Int
  sum: MenubarAggregatorSum
  avg: MenubarAggregatorAvg
  min: MenubarAggregatorMin
  max: MenubarAggregatorMax
}

type MenubarAggregatorAvg {
  order: Float
}

type MenubarAggregatorMax {
  order: Float
}

type MenubarAggregatorMin {
  order: Float
}

type MenubarAggregatorSum {
  order: Float
}

type MenubarConnection {
  values: [Menubar]
  groupBy: MenubarGroupBy
  aggregate: MenubarAggregator
}

type MenubarConnection_id {
  key: ID
  connection: MenubarConnection
}

type MenubarConnectionCreatedAt {
  key: DateTime
  connection: MenubarConnection
}

type MenubarConnectionHref {
  key: String
  connection: MenubarConnection
}

type MenubarConnectionId {
  key: ID
  connection: MenubarConnection
}

type MenubarConnectionOrder {
  key: Int
  connection: MenubarConnection
}

type MenubarConnectionPlace {
  key: String
  connection: MenubarConnection
}

type MenubarConnectionTitle {
  key: String
  connection: MenubarConnection
}

type MenubarConnectionUpdatedAt {
  key: DateTime
  connection: MenubarConnection
}

type MenubarGroupBy {
  _id: [MenubarConnection_id]
  id: [MenubarConnectionId]
  createdAt: [MenubarConnectionCreatedAt]
  updatedAt: [MenubarConnectionUpdatedAt]
  title: [MenubarConnectionTitle]
  order: [MenubarConnectionOrder]
  place: [MenubarConnectionPlace]
  href: [MenubarConnectionHref]
}

input MenubarInput {
  title: String
  order: Int
  place: ENUM_MENUBAR_PLACE
  href: String
  menutabs: [ID]
}

type Menutab {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  order: Int
  href: String
  menubar: Menubar
}

type MenutabAggregator {
  count: Int
  totalCount: Int
  sum: MenutabAggregatorSum
  avg: MenutabAggregatorAvg
  min: MenutabAggregatorMin
  max: MenutabAggregatorMax
}

type MenutabAggregatorAvg {
  order: Float
}

type MenutabAggregatorMax {
  order: Float
}

type MenutabAggregatorMin {
  order: Float
}

type MenutabAggregatorSum {
  order: Float
}

type MenutabConnection {
  values: [Menutab]
  groupBy: MenutabGroupBy
  aggregate: MenutabAggregator
}

type MenutabConnection_id {
  key: ID
  connection: MenutabConnection
}

type MenutabConnectionCreatedAt {
  key: DateTime
  connection: MenutabConnection
}

type MenutabConnectionHref {
  key: String
  connection: MenutabConnection
}

type MenutabConnectionId {
  key: ID
  connection: MenutabConnection
}

type MenutabConnectionMenubar {
  key: ID
  connection: MenutabConnection
}

type MenutabConnectionOrder {
  key: Int
  connection: MenutabConnection
}

type MenutabConnectionTitle {
  key: String
  connection: MenutabConnection
}

type MenutabConnectionUpdatedAt {
  key: DateTime
  connection: MenutabConnection
}

type MenutabGroupBy {
  _id: [MenutabConnection_id]
  id: [MenutabConnectionId]
  createdAt: [MenutabConnectionCreatedAt]
  updatedAt: [MenutabConnectionUpdatedAt]
  title: [MenutabConnectionTitle]
  order: [MenutabConnectionOrder]
  href: [MenutabConnectionHref]
  menubar: [MenutabConnectionMenubar]
}

input MenutabInput {
  title: String
  order: Int
  href: String
  menubar: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Menubar | createMenubarPayload | updateMenubarPayload | deleteMenubarPayload | MenubarConnection | MenubarAggregator | MenubarAggregatorSum | MenubarAggregatorAvg | MenubarAggregatorMin | MenubarAggregatorMax | MenubarGroupBy | MenubarConnection_id | MenubarConnectionId | MenubarConnectionCreatedAt | MenubarConnectionUpdatedAt | MenubarConnectionTitle | MenubarConnectionOrder | MenubarConnectionPlace | MenubarConnectionHref | Menutab | createMenutabPayload | updateMenutabPayload | deleteMenutabPayload | MenutabConnection | MenutabAggregator | MenutabAggregatorSum | MenutabAggregatorAvg | MenutabAggregatorMin | MenutabAggregatorMax | MenutabGroupBy | MenutabConnection_id | MenutabConnectionId | MenutabConnectionCreatedAt | MenutabConnectionUpdatedAt | MenutabConnectionTitle | MenutabConnectionOrder | MenutabConnectionHref | MenutabConnectionMenubar | New | createNewPayload | updateNewPayload | deleteNewPayload | NewConnection | NewAggregator | NewGroupBy | NewConnection_id | NewConnectionId | NewConnectionCreatedAt | NewConnectionUpdatedAt | NewConnectionName | NewConnectionDate_publish | NewConnectionContent | NewConnectionType | NewConnectionDescription | Test | createTestPayload | updateTestPayload | deleteTestPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createMenubar(input: createMenubarInput): createMenubarPayload
  updateMenubar(input: updateMenubarInput): updateMenubarPayload
  deleteMenubar(input: deleteMenubarInput): deleteMenubarPayload
  createMenutab(input: createMenutabInput): createMenutabPayload
  updateMenutab(input: updateMenutabInput): updateMenutabPayload
  deleteMenutab(input: deleteMenutabInput): deleteMenutabPayload
  createNew(input: createNewInput): createNewPayload
  updateNew(input: updateNewInput): updateNewPayload
  deleteNew(input: deleteNewInput): deleteNewPayload
  createTest(input: createTestInput): createTestPayload
  updateTest(input: updateTestInput): updateTestPayload
  deleteTest(input: deleteTestInput): deleteTestPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type New {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  date_publish: DateTime
  content: String
  type: ENUM_NEW_TYPE
  description: String
}

type NewAggregator {
  count: Int
  totalCount: Int
}

type NewConnection {
  values: [New]
  groupBy: NewGroupBy
  aggregate: NewAggregator
}

type NewConnection_id {
  key: ID
  connection: NewConnection
}

type NewConnectionContent {
  key: String
  connection: NewConnection
}

type NewConnectionCreatedAt {
  key: DateTime
  connection: NewConnection
}

type NewConnectionDate_publish {
  key: DateTime
  connection: NewConnection
}

type NewConnectionDescription {
  key: String
  connection: NewConnection
}

type NewConnectionId {
  key: ID
  connection: NewConnection
}

type NewConnectionName {
  key: String
  connection: NewConnection
}

type NewConnectionType {
  key: String
  connection: NewConnection
}

type NewConnectionUpdatedAt {
  key: DateTime
  connection: NewConnection
}

type NewGroupBy {
  _id: [NewConnection_id]
  id: [NewConnectionId]
  createdAt: [NewConnectionCreatedAt]
  updatedAt: [NewConnectionUpdatedAt]
  name: [NewConnectionName]
  date_publish: [NewConnectionDate_publish]
  content: [NewConnectionContent]
  type: [NewConnectionType]
  description: [NewConnectionDescription]
}

input NewInput {
  name: String
  date_publish: DateTime
  content: String
  type: ENUM_NEW_TYPE
  description: String
}

type Query {
  menubar(id: ID!): Menubar
  menubars(sort: String, limit: Int, start: Int, where: JSON): [Menubar]
  menubarsConnection(sort: String, limit: Int, start: Int, where: JSON): MenubarConnection
  menutab(id: ID!): Menutab
  menutabs(sort: String, limit: Int, start: Int, where: JSON): [Menutab]
  menutabsConnection(sort: String, limit: Int, start: Int, where: JSON): MenutabConnection
  new(id: ID!): New
  news(sort: String, limit: Int, start: Int, where: JSON): [New]
  newsConnection(sort: String, limit: Int, start: Int, where: JSON): NewConnection
  test(id: ID!): Test
  tests(sort: String, limit: Int, start: Int, where: JSON): [Test]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Test {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  img: UploadFile
}

input TestInput {
  img: ID
}

input updateMenubarInput {
  where: InputID
  data: editMenubarInput
}

type updateMenubarPayload {
  menubar: Menubar
}

input updateMenutabInput {
  where: InputID
  data: editMenutabInput
}

type updateMenutabPayload {
  menutab: Menutab
}

input updateNewInput {
  where: InputID
  data: editNewInput
}

type updateNewPayload {
  new: New
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTestInput {
  where: InputID
  data: editTestInput
}

type updateTestPayload {
  test: Test
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
